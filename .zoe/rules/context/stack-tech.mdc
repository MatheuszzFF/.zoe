---
description: 
globs: 
alwaysApply: false
---
# Stack Tecnológica - React/Next

## 🛠️ Tecnologias Principais
- **Frontend:** React 18+ / Next.js 14+
- **Linguagem:** TypeScript
- **Estilo:** Tailwind CSS (preferência) ou Styled-components (fallback)
- **Estado:** Context API / Zustand
- **Forms:** React Hook Form
- **Requests:** Axios / SWR
- **Testes:** Vitest + @testing-library/react + userEvent

## 🧪 Estratégia de Testes
### **Ferramentas:**
- **Vitest** → Test runner (mais rápido que Jest)
- **@testing-library/react** → Renderização de componentes
- **@testing-library/user-event** → Interações realistas (SEMPRE usar)
- **@testing-library/jest-dom** → Matchers específicos para DOM

### **Abordagem userEvent:**
```tsx
// ✅ SEMPRE usar userEvent.setup()
const user = userEvent.setup();

// ✅ Para cliques
await user.click(button);

// ✅ Para digitação
await user.type(input, 'texto');

// ✅ Para navegação por teclado
await user.tab();
await user.keyboard('{Enter}');

// ❌ NUNCA usar fireEvent diretamente
```

## 🎨 Estratégia de Estilo
### 1. **Se projeto tem Tailwind:**
- Usar classes Tailwind
- Separar classes em arquivo `.classes.ts`
- Componentes com className
- Responsive com prefixos (sm:, md:, lg:)

### 2. **Se projeto NÃO tem Tailwind:**
- Usar Styled-components no `.template.tsx`
- CSS-in-JS approach
- Styled wrappers

## 📋 Estrutura de Componentes
### **Nomenclatura:** kebab-case (separado por traço, minúsculo)
**Exemplo:** `update-modal/`

### **Tipos de Arquivo:**
- **`.component.tsx`** → Toda a lógica do componente
- **`.template.tsx`** → Toda a montagem/estrutura visual
- **`.classes.ts`** → Classes Tailwind organizadas (se Tailwind)
- **`.types.ts`** → Interfaces TypeScript do componente
- **`.composite.tsx`** → Subcomponentes reutilizáveis (opcional)
- **`.test.tsx`** → Testes do componente (OBRIGATÓRIO)

## 🎯 Estrutura de Pastas
```
src/
├── components/
│   └── update-modal/
│       ├── update-modal.component.tsx
│       ├── update-modal.template.tsx
│       ├── update-modal.classes.ts (se Tailwind)
│       ├── update-modal.types.ts
│       ├── update-modal.composite.tsx (opcional)
│       └── update-modal.test.tsx (OBRIGATÓRIO)
├── pages/         # Páginas Next.js (mesma estrutura)
├── hooks/         # Custom hooks
├── context/       # Context providers
├── types/         # Tipos globais
├── utils/         # Funções utilitárias
├── test/          # Setup e mocks de teste
└── styles/        # Estilos globais (se não Tailwind)
```

## 📋 Padrões de Código
- Componentes funcionais com hooks
- Separação clara: lógica (.component) vs visual (.template)
- Interface TypeScript em arquivo separado (.types)
- Classes Tailwind organizadas (.classes) se aplicável
- Nomes em kebab-case para pastas
- PascalCase para componentes exportados
- Export default no final de cada arquivo
- **Testes obrigatórios** para todos os componentes

## ✅ Sempre Aplicar
- TypeScript interfaces em arquivo separado
- Separação lógica/visual
- Responsive design (mobile-first)
- Accessibility (ARIA labels)
- SEO otimizado (meta tags) para páginas
- Performance (lazy loading, memo)
- Error boundaries
- **Testes com userEvent** (renderização, interações, acessibilidade)

## 🧪 Padrões de Teste
### **Estrutura de Teste:**
```tsx
describe('ComponentName', () => {
  describe('Renderização', () => {
    // Testes de renderização
  });
  
  describe('Interações com userEvent', () => {
    // Testes de clique, digitação, formulários
  });
  
  describe('Estados', () => {
    // Loading, erro, sucesso
  });
  
  describe('Acessibilidade', () => {
    // ARIA labels, navegação por teclado
  });
});
```

### **userEvent Patterns:**
- **Setup:** `const user = userEvent.setup();`
- **Cliques:** `await user.click(element)`
- **Digitação:** `await user.type(input, 'texto')`
- **Formulários:** `await user.type()` + `await user.click(submitBtn)`
- **Teclado:** `await user.tab()` + `await user.keyboard('{Enter}')`

## 🔍 Detecção Automática
**Verificar se existe:**
- `tailwind.config.js`
- `tailwindcss` em package.json
- `@tailwind` imports em CSS

**Se encontrado → Tailwind + .classes.ts**
**Se não → Styled-components no .template.tsx**

## 🚫 Evitar
- Class components
- Inline styles
- Props drilling excessivo
- Console.log em produção
- Dependências desnecessárias
- **fireEvent em vez de userEvent**
- **Testes sem userEvent setup**
- **Componentes sem testes**





