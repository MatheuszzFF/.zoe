---
description: 
globs: 
alwaysApply: false
---
# ðŸ§© Create Component

## Comando
`criar componente [nome]`

## Comportamento
**Criar estrutura completa de componente React:**

### **Estrutura criada:**
```
components/[nome-do-componente]/
â”œâ”€â”€ [nome].component.tsx    # Toda a lÃ³gica (useState, useEffect, handlers)
â”œâ”€â”€ [nome].template.tsx     # Toda a estrutura visual
â”œâ”€â”€ [nome].classes.ts       # Classes Tailwind organizadas (se Tailwind)
â”œâ”€â”€ [nome].types.ts         # Interfaces TypeScript
â””â”€â”€ [nome].composite.tsx    # Subcomponentes reutilizÃ¡veis (opcional)
```

## Processo
1. **Detectar estilo** â†’ `commands/detect-style.mdc`
2. **Usar template** â†’ `templates/react-component.mdc`
3. **Criar estrutura** completa de arquivos
4. **Aplicar padrÃµes** React/TypeScript
5. **Documentar criaÃ§Ã£o** no progresso

## SeparaÃ§Ã£o de Responsabilidades
- **.component.tsx** â†’ LÃ³gica e state
- **.template.tsx** â†’ Estrutura visual
- **.classes.ts** â†’ Estilos (se Tailwind)
- **.types.ts** â†’ Interfaces
- **.composite.tsx** â†’ Subcomponentes (opcional)

## Objetivo
Criar componentes com estrutura padronizada

