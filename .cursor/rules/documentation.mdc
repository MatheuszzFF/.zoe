---
description: Regras de documentação obrigatória
globs: ["src/**/*.tsx", "src/**/*.ts", "**/*.markdown.mdc"]
alwaysApply: true
---
# Regras de Documentação

## Localização
- [ ] Todos os markdowns DEVEM estar em `./cursor/project/markdowns/`
- [ ] Estrutura de pastas:
  ```
  ./cursor/project/markdowns/
  ├── components/           # Documentação de componentes
  ├── pages/               # Documentação de páginas
  ├── hooks/               # Documentação de hooks
  ├── contexts/            # Documentação de contexts
  ├── utils/               # Documentação de funções utilitárias
  └── api/                 # Documentação de endpoints
  ```

## Obrigatoriedade
- [ ] TODO componente DEVE ter documentação
- [ ] TODA página DEVE ter documentação
- [ ] TODO hook DEVE ter documentação
- [ ] TODO context DEVE ter documentação
- [ ] TODA função utilitária DEVE ter documentação
- [ ] TODO endpoint DEVE ter documentação

## Conteúdo Obrigatório
- [ ] **Identificação**:
  - Nome do componente/página/hook
  - Data de criação
  - Última atualização
  - Autor

- [ ] **Histórico de Mudanças**:
  - Lista cronológica de alterações
  - Data de cada mudança
  - Descrição detalhada do que foi alterado
  - Motivo da alteração

- [ ] **Estrutura**:
  - Arquivos relacionados
  - Dependências
  - Importações
  - Exports

- [ ] **Funcionalidades**:
  - Lista completa de funcionalidades
  - Como cada funcionalidade funciona
  - Exemplos de uso
  - Casos de borda

- [ ] **Props/Types**:
  - Interface completa
  - Descrição de cada prop/type
  - Valores padrão
  - Exemplos de uso

- [ ] **Dependências**:
  - Bibliotecas externas
  - Componentes internos
  - Hooks utilizados
  - Contexts necessários

- [ ] **Considerações Técnicas**:
  - Performance
  - Segurança
  - Acessibilidade
  - Limitações conhecidas

- [ ] **Exemplos de Uso**:
  - Código de exemplo
  - Casos de uso comuns
  - Padrões recomendados

## Formato
```markdown
# Nome do Componente

## Identificação
- **Criado em**: [DATA]
- **Última atualização**: [DATA]
- **Autor**: [NOME]

## Histórico de Mudanças
### [2024-03-21]
- [x] Implementação inicial
- [x] Adição de funcionalidade X
- [ ] Pendente: funcionalidade Y

## Estrutura
```typescript
// Exemplo de estrutura de arquivos
Component/
  ├── Component.component.tsx
  ├── Component.template.tsx
  └── Component.types.ts
```

## Funcionalidades
### Funcionalidade X
- Descrição detalhada
- Como funciona
- Exemplo de uso
- Considerações importantes

## Props
```typescript
interface Props {
  // Descrição detalhada de cada prop
  prop1: string;  // Descrição da prop1
  prop2: number;  // Descrição da prop2
}
```

## Dependências
- Biblioteca X: versão, propósito
- Componente Y: link, propósito
- Hook Z: link, propósito

## Considerações Técnicas
- Performance: pontos de atenção
- Segurança: medidas implementadas
- Acessibilidade: recursos disponíveis
- Limitações: o que não é possível fazer

## Exemplos de Uso
```typescript
// Exemplo completo de implementação
<Component
  prop1="valor"
  prop2={123}
/>
```

## Checklist de Implementação
- [ ] Estrutura base
- [ ] Funcionalidades principais
- [ ] Testes
- [ ] Documentação
```

## Atualização
- [ ] SEMPRE ler a documentação antes de modificar
- [ ] Atualizar documentação junto com o código
- [ ] Manter histórico de mudanças atualizado
- [ ] Verificar se todas as seções estão atualizadas

## Revisão
- [ ] Verificar se a documentação está completa
- [ ] Confirmar se os exemplos estão funcionando
- [ ] Validar se as considerações técnicas estão atualizadas
- [ ] Garantir que o histórico está correto

## Estrutura de Documentação

### Localização
- Documentação do projeto: `./markdowns/project/`
- Documentação de componentes: junto ao componente
- Documentação de páginas: junto à página

### Organização
```
src/
├── app/
│   ├── (internal)/
│   │   ├── dashboard/
│   │   │   ├── page.tsx
│   │   │   ├── Dashboard.component.tsx
│   │   │   ├── Dashboard.template.tsx
│   │   │   ├── Dashboard.types.ts
│   │   │   └── dashboard.md        # Documentação da página
│   │   └── claims/
│   │       ├── page.tsx
│   │       └── claims.md           # Documentação da página
│   └── components/
│       ├── Header/
│       │   ├── Header.component.tsx
│       │   ├── Header.template.tsx
│       │   ├── Header.types.ts
│       │   └── header.md           # Documentação do componente
│       └── Sidebar/
│           ├── Sidebar.component.tsx
│           ├── Sidebar.template.tsx
│           ├── Sidebar.types.ts
│           └── sidebar.md          # Documentação do componente
```

## Regras de Documentação

### 1. Estrutura de Arquivos
- Cada componente/página deve ter seu próprio arquivo .md
- O arquivo .md deve estar no mesmo diretório do componente/página
- Use nomes descritivos e em inglês para os arquivos

### 2. Formato dos Arquivos
- Use Markdown para toda documentação
- Inclua exemplos de código quando relevante
- Mantenha a documentação atualizada com as mudanças
- Use blocos de código com syntax highlighting

### 3. Conteúdo Mínimo
- Descrição do propósito
- Estrutura de arquivos
- Props/Types (para componentes)
- Exemplos de uso
- Dependências
- Considerações importantes

### 4. Atualizações
- Documente mudanças significativas
- Mantenha um histórico de alterações
- Atualize a documentação junto com o código
- Use tags de data nas alterações

### 5. Obrigatoriedade de Documentação
- **TODO** componente novo DEVE ter sua documentação criada
- **TODA** página nova DEVE ter sua documentação criada
- A documentação deve ser criada ANTES ou DURANTE o desenvolvimento
- Não é permitido criar componentes/páginas sem documentação
- A documentação deve ser clara e completa

### 6. Checklist de Documentação
- Use o formato de checklist para documentação
- [ ] indica tarefa pendente
- [x] indica tarefa concluída
- Mantenha o checklist atualizado
- Revise o checklist antes de finalizar

## Exemplo de Documentação de Componente/Página

```markdown
# Dashboard

## Histórico de Mudanças

### [2024-03-21]
- [x] Implementação inicial do dashboard
- [x] Criação da estrutura de componentes
- [x] Integração com API de sinistros
- [ ] Implementar filtros avançados
- [ ] Adicionar gráficos de performance

### [2024-03-20]
- [x] Criação do layout base
- [x] Definição da estrutura de dados
- [x] Implementação do loading state

## Estrutura de Arquivos
```
src/app/(internal)/dashboard/
├── page.tsx
├── Dashboard.component.tsx
├── Dashboard.template.tsx
├── Dashboard.types.ts
└── dashboard.markdown.mdc
```

## Funcionalidades
- Exibe cards para cada estágio do fluxo de sinistros
- Mostra indicadores de sinistros em atraso e em dia
- Permite navegação para lista de sinistros por estágio
- Implementa estado de loading com skeleton
- Busca de sinistros (a ser implementada)

## Props e Types
```typescript
interface StageClaims {
  total: number
  delayed: number
}

interface DashboardProps {
  claims: Record<string, StageClaims>
  loading: boolean
  onSearch: (value: string) => void
  onStageClick: (stage: string) => void
  onClaimClick: (claim: Claim) => void
}
```

## Dependências
- Next.js
- React
- Tailwind CSS
- Lucide Icons
- Sonner (toast)

## Considerações Técnicas
- **Performance**: 
  - Dados agrupados e calculados no backend
  - Renderização otimizada com estados mínimos
  - Skeleton loading para melhor UX

- **Segurança**:
  - Autenticação via Supabase
  - Validação de dados no backend

- **Acessibilidade**:
  - Contraste adequado nos indicadores
  - Textos descritivos em maiúsculas
  - Navegação por teclado
  - Tooltips informativos nos indicadores

- **Limitações**:
  - Busca ainda não implementada
  - Sem filtros avançados
  - Sem gráficos de progresso

## Exemplos de Uso
```tsx
// Uso básico
<DashboardComponent />

// Com dados mockados
const mockClaims = {
  preliminar: { total: 10, delayed: 2 },
  documentacao: { total: 5, delayed: 1 },
  vistoria: { total: 8, delayed: 0 }
}

<DashboardTemplate
  claims={mockClaims}
  loading={false}
  onSearch={(value) => console.log(value)}
  onStageClick={(stage) => console.log(stage)}
  onClaimClick={(claim) => console.log(claim)}
/>
```

## Checklist de Implementação
- [x] Estrutura base do componente
- [x] Integração com API dashboard
- [x] Estados de loading
- [x] Indicadores visuais corretos
- [x] Navegação
- [x] Textos em maiúsculas
- [x] Tooltips informativos
- [ ] Testes unitários
- [ ] Filtros avançados
- [ ] Gráficos de progresso
- [ ] Implementação da busca
```

## Boas Práticas

1. **Atualização Contínua**
   - Documente enquanto desenvolve
   - Não deixe para documentar depois
   - Mantenha o histórico atualizado

2. **Clareza**
   - Use linguagem clara e direta
   - Inclua exemplos práticos
   - Documente casos de uso comuns

3. **Organização**
   - Mantenha a estrutura consistente
   - Use links para navegação
   - Mantenha um índice atualizado

4. **Versionamento**
   - Documente versões
   - Mantenha changelog
   - Registre breaking changes

5. **Checklist de Criação**
   - [ ] Criar estrutura de arquivos
   - [ ] Criar documentação
   - [ ] Implementar componente/página
   - [ ] Atualizar documentação com mudanças
   - [ ] Revisar clareza e completude

6. **Revisão de Documentação**
   - [ ] Verificar se todos os markdowns estão atualizados
   - [ ] Confirmar se os checklists estão corretos
   - [ ] Validar se as mudanças estão documentadas
   - [ ] Garantir que a documentação está clara

## Conteúdo Obrigatório
- [ ] Histórico de mudanças com datas
- [ ] Estrutura de arquivos
- [ ] Funcionalidades implementadas
- [ ] Dependências
- [ ] Considerações importantes
- [ ] Checklist de implementação

## Reutilização de Código
- [ ] Documentar componentes reutilizáveis:
  - [ ] Explicar o propósito do componente
  - [ ] Listar todos os locais onde é usado
  - [ ] Fornecer exemplos de uso
  - [ ] Documentar props e tipos
- [ ] Ao abstrair código:
  - [ ] Atualizar documentação dos componentes que usavam a implementação antiga
  - [ ] Adicionar nota sobre a migração no histórico de mudanças
  - [ ] Documentar a nova implementação reutilizável

## Exemplo
```markdown
# Nome do Componente

## Histórico de Mudanças
### [2024-03-21]
- [x] Abstraído de ComponenteA e ComponenteB
- [x] Implementado como componente reutilizável
- [ ] Adicionar testes unitários

## Uso
Este componente é usado em:
- ComponenteA: [link]
- ComponenteB: [link]

## Exemplo de Implementação
```typescript
<ComponenteReutilizavel
  prop1="valor"
  prop2={123}
/>
```

## Props
- prop1: string
- prop2: number
```







