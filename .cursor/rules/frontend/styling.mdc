---
description: 
globs: 
alwaysApply: false
---
# Estilização Frontend

## Princípios Fundamentais

### 1. Design System Moderno (NOVA DIRETRIZ)

#### UI Layouts Modernos e Atrativos
Todos os layouts devem seguir os padrões modernos estabelecidos com base no layout de "Novo Sinistro":

**Background com Gradientes:**
```css
/* Layout principal sempre com gradiente */
.page-container {
  min-height: 100vh;
  background: linear-gradient(135deg, rgb(248 250 252) 0%, rgb(226 232 240) 100%);
}

/* Dark mode */
.dark .page-container {
  background: linear-gradient(135deg, rgb(15 23 42) 0%, rgb(30 41 59) 100%);
}
```

**Cards com Glassmorphism:**
```css
.modern-card {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(12px);
  border: 0;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
}

.dark .modern-card {
  background: rgba(30, 41, 59, 0.8);
}
```

**Headers de Página Modernos:**
```typescript
// Estrutura padrão para headers
<div className="flex items-center gap-4 mb-8">
  <Button
    variant="ghost"
    size="icon"
    className="h-12 w-12 hover:bg-white/80 dark:hover:bg-slate-800 shadow-sm border border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800"
  >
    <ArrowLeft className="h-5 w-5" />
  </Button>
  <div className="flex-1">
    <div className="flex items-center gap-3">
      <div className="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg">
        <IconComponent className="h-6 w-6 text-white" />
      </div>
      <div>
        <h1 className="text-4xl font-bold tracking-tight text-slate-900 dark:text-slate-100">
          Título da Página
        </h1>
        <p className="text-lg text-slate-600 dark:text-slate-400 mt-1">
          Descrição detalhada da funcionalidade
        </p>
      </div>
    </div>
  </div>
</div>
```

**Seções Organizadas com Ícones:**
```typescript
// Padrão para seções internas
<div className="space-y-6">
  <div className="flex items-center gap-3 pb-4 border-b border-slate-200 dark:border-slate-700">
    <div className="p-2 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-lg">
      <SectionIcon className="h-5 w-5 text-white" />
    </div>
    <h3 className="text-xl font-semibold text-slate-900 dark:text-slate-100">
      Nome da Seção
    </h3>
  </div>
  {/* Conteúdo da seção */}
</div>
```

**Cards com Headers Gradientes:**
```typescript
<Card className="shadow-xl border-0 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm">
  <CardHeader className="border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-700">
    <div className="flex items-center gap-3">
      <div className="p-2 bg-gradient-to-br from-slate-600 to-slate-700 rounded-lg">
        <FileText className="h-5 w-5 text-white" />
      </div>
      <CardTitle className="text-2xl text-slate-900 dark:text-slate-100">
        Título do Card
      </CardTitle>
    </div>
  </CardHeader>
  <CardContent className="pt-8 pb-8">
    {/* Conteúdo */}
  </CardContent>
</Card>
```

#### Campos de Formulário Modernos
```css
/* Inputs maiores e mais espaçados */
.modern-input {
  height: 3rem; /* h-12 */
  font-size: 1rem; /* text-base */
  border-color: rgb(203 213 225); /* border-slate-300 */
  border-radius: 0.375rem;
  transition: all 0.2s;
}

.modern-input:focus {
  border-color: rgb(59 130 246); /* focus:border-blue-500 */
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); /* focus:ring-blue-500/20 */
}
```

#### Paleta de Cores para Seções
```typescript
// Cores temáticas por seção
const sectionColors = {
  identification: 'from-emerald-500 to-emerald-600',    // Verde
  user: 'from-purple-500 to-purple-600',               // Roxo
  coverage: 'from-amber-500 to-amber-600',             // Âmbar
  dates: 'from-rose-500 to-rose-600',                  // Rosa
  actions: 'from-blue-500 to-blue-600',               // Azul
  data: 'from-cyan-500 to-cyan-600',                  // Ciano
  settings: 'from-indigo-500 to-indigo-600',          // Índigo
  reports: 'from-teal-500 to-teal-600'                // Verde-azulado
}
```

#### Botões com Gradientes
```typescript
// Botão primário moderno
<Button className="h-12 px-8 text-base font-medium bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg">
  <IconComponent className="h-4 w-4 mr-2" />
  Texto do Botão
</Button>

// Estados de loading
{loading ? (
  <div className="flex items-center gap-2">
    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
    Carregando...
  </div>
) : (
  <div className="flex items-center gap-2">
    <IconComponent className="h-4 w-4" />
    Texto Normal
  </div>
)}
```

#### Espaçamento Generoso
```css
/* Uso consistente de espaçamento */
.page-content {
  padding: 2rem 1rem; /* py-8 px-4 */
  max-width: 112rem; /* max-w-7xl */
  margin: 0 auto;
}

.section-spacing {
  margin-bottom: 2.5rem; /* space-y-10 */
}

.field-spacing {
  margin-bottom: 1.5rem; /* space-y-6 */
}
```

### 2. React Select Padrão
Para todos os campos de seleção, usar o padrão estabelecido:

```typescript
// Estilos customizados padrão
const selectStyles = {
  control: (provided: any, state: any) => ({
    ...provided,
    height: '48px',
    minHeight: '48px',
    borderColor: state.isFocused ? 'hsl(var(--ring))' : 'hsl(var(--border))',
    borderRadius: '6px',
    boxShadow: state.isFocused ? '0 0 0 2px hsl(var(--ring) / 0.2)' : 'none',
    '&:hover': {
      borderColor: state.isFocused ? 'hsl(var(--ring))' : 'hsl(var(--border))'
    }
  }),
  // ... resto dos estilos padrão
}

// Uso padrão
<Select<OptionType>
  value={options.find(option => option.value === value) || null}
  onChange={(selectedOption: OptionType | null) => 
    handleChange(selectedOption?.value || '')
  }
  options={options}
  styles={selectStyles}
  placeholder="Selecione uma opção"
  isSearchable
  isClearable
  className="text-base"
/>
```

### 3. Ícones e Identificação Visual
- Sempre usar ícones do Lucide React
- Ícones dentro de containers com gradiente
- Cores consistentes por categoria de funcionalidade
- Tamanhos padronizados (h-4 w-4, h-5 w-5, h-6 w-6)

### 4. Design System Original

### CSS-in-JS
```typescript
// Exemplo de styled-components
const Button = styled.button<{ variant: 'primary' | 'secondary' }>`
  padding: ${props => props.theme.spacing[4]};
  border-radius: ${props => props.theme.borderRadius.md};
  background: ${props => 
    props.variant === 'primary' 
      ? props.theme.colors.primary[600]
      : props.theme.colors.gray[200]
  };
  color: ${props => 
    props.variant === 'primary' 
      ? props.theme.colors.white
      : props.theme.colors.gray[900]
  };
  
  &:hover {
    background: ${props => 
      props.variant === 'primary' 
        ? props.theme.colors.primary[700]
        : props.theme.colors.gray[300]
    };
  }
`
```

### 5. CSS-in-JS
```typescript
// Exemplo de styled-components
const Button = styled.button<{ variant: 'primary' | 'secondary' }>`
  padding: ${props => props.theme.spacing[4]};
  border-radius: ${props => props.theme.borderRadius.md};
  background: ${props => 
    props.variant === 'primary' 
      ? props.theme.colors.primary[600]
      : props.theme.colors.gray[200]
  };
  color: ${props => 
    props.variant === 'primary' 
      ? props.theme.colors.white
      : props.theme.colors.gray[900]
  };
  
  &:hover {
    background: ${props => 
      props.variant === 'primary' 
        ? props.theme.colors.primary[700]
        : props.theme.colors.gray[300]
    };
  }
`
```

### 6. CSS Modules
```css
/* Button.module.css */
.button {
  padding: var(--spacing-4);
  border-radius: var(--border-radius-md);
  font-weight: 500;
  transition: all 0.2s;
}

.primary {
  background: var(--color-primary-600);
  color: var(--color-white);
}

.primary:hover {
  background: var(--color-primary-700);
}

.secondary {
  background: var(--color-gray-200);
  color: var(--color-gray-900);
}

.secondary:hover {
  background: var(--color-gray-300);
}
```

### 7. CSS Modules
```css
/* Button.module.css */
.button {
  padding: var(--spacing-4);
  border-radius: var(--border-radius-md);
  font-weight: 500;
  transition: all 0.2s;
}

.primary {
  background: var(--color-primary-600);
  color: var(--color-white);
}

.primary:hover {
  background: var(--color-primary-700);
}

.secondary {
  background: var(--color-gray-200);
  color: var(--color-gray-900);
}

.secondary:hover {
  background: var(--color-gray-300);
}
```

### 8. Responsividade
```typescript
// Exemplo de media queries
const Container = styled.div`
  width: 100%;
  padding: ${props => props.theme.spacing[4]};
  
  @media (min-width: ${props => props.theme.breakpoints.sm}) {
    padding: ${props => props.theme.spacing[6]};
  }
  
  @media (min-width: ${props => props.theme.breakpoints.md}) {
    padding: ${props => props.theme.spacing[8]};
  }
  
  @media (min-width: ${props => props.theme.breakpoints.lg}) {
    max-width: 1200px;
    margin: 0 auto;
  }
`
```

### 9. Theming
```typescript
// Exemplo de tema
const theme = {
  light: {
    colors: {
      background: '#ffffff',
      text: '#1a1a1a',
      // ...
    }
  },
  dark: {
    colors: {
      background: '#1a1a1a',
      text: '#ffffff',
      // ...
    }
  }
}

// Exemplo de ThemeProvider
function App() {
  const [theme, setTheme] = useState('light')
  
  return (
    <ThemeProvider theme={theme === 'light' ? theme.light : theme.dark}>
      <GlobalStyles />
      <Button onClick={() => setTheme(t => t === 'light' ? 'dark' : 'light')}>
        Toggle theme
      </Button>
    </ThemeProvider>
  )
}
```

### 10. Animações
```typescript
// Exemplo de animação com Framer Motion
const AnimatedButton = motion.button`
  padding: ${props => props.theme.spacing[4]};
  border-radius: ${props => props.theme.borderRadius.md};
  background: ${props => props.theme.colors.primary[600]};
  color: ${props => props.theme.colors.white};
`

function Button() {
  return (
    <AnimatedButton
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      transition={{ type: 'spring', stiffness: 400, damping: 17 }}
    >
      Click me
    </AnimatedButton>
  )
}
```

### 11. Layout
- Grid system
- Flexbox
- CSS Grid
- Responsive design
- Container queries

### 12. Tipografia
- Font families
- Font sizes
- Line heights
- Font weights
- Text alignment

### 13. Cores
- Color palette
- Color contrast
- Color accessibility
- Color modes
- Color tokens

### 14. Acessibilidade
- Color contrast
- Focus states
- Reduced motion
- High contrast mode
- Screen reader support

