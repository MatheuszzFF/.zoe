---
description: 
globs: 
alwaysApply: false
---
# Internacionalização Frontend

## Princípios Fundamentais

### 1. Configuração de i18n
```typescript
// Exemplo de configuração i18n
import i18n from 'i18next'
import { initReactI18next } from 'react-i18next'

i18n
  .use(initReactI18next)
  .init({
    resources: {
      en: {
        translation: {
          welcome: 'Welcome',
          hello: 'Hello, {{name}}!',
          items: {
            one: '{{count}} item',
            other: '{{count}} items'
          }
        }
      },
      pt: {
        translation: {
          welcome: 'Bem-vindo',
          hello: 'Olá, {{name}}!',
          items: {
            one: '{{count}} item',
            other: '{{count}} itens'
          }
        }
      }
    },
    lng: 'pt',
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false
    }
  })
```

### 2. Uso de Traduções
```typescript
// Exemplo de uso de traduções
import { useTranslation } from 'react-i18next'

function Welcome() {
  const { t } = useTranslation()
  
  return (
    <div>
      <h1>{t('welcome')}</h1>
      <p>{t('hello', { name: 'John' })}</p>
      <p>{t('items', { count: 5 })}</p>
    </div>
  )
}
```

### 3. Formatação de Datas
```typescript
// Exemplo de formatação de datas
import { useTranslation } from 'react-i18next'
import { format } from 'date-fns'
import { ptBR, enUS } from 'date-fns/locale'

function DateDisplay({ date }) {
  const { i18n } = useTranslation()
  
  const locale = i18n.language === 'pt' ? ptBR : enUS
  
  return (
    <div>
      {format(date, 'PPP', { locale })}
    </div>
  )
}
```

### 4. Formatação de Números
```typescript
// Exemplo de formatação de números
import { useTranslation } from 'react-i18next'

function NumberDisplay({ value }) {
  const { i18n } = useTranslation()
  
  return (
    <div>
      {new Intl.NumberFormat(i18n.language, {
        style: 'currency',
        currency: 'BRL'
      }).format(value)}
    </div>
  )
}
```

### 5. Pluralização
```typescript
// Exemplo de pluralização
import { useTranslation } from 'react-i18next'

function ItemCount({ count }) {
  const { t } = useTranslation()
  
  return (
    <div>
      {t('items', { count })}
    </div>
  )
}
```

### 6. Mudança de Idioma
```typescript
// Exemplo de mudança de idioma
import { useTranslation } from 'react-i18next'

function LanguageSwitcher() {
  const { i18n } = useTranslation()
  
  const changeLanguage = (lng) => {
    i18n.changeLanguage(lng)
  }
  
  return (
    <div>
      <button onClick={() => changeLanguage('pt')}>
        Português
      </button>
      <button onClick={() => changeLanguage('en')}>
        English
      </button>
    </div>
  )
}
```

### 7. Carregamento Dinâmico
```typescript
// Exemplo de carregamento dinâmico
import i18n from 'i18next'
import { initReactI18next } from 'react-i18next'
import Backend from 'i18next-http-backend'
import LanguageDetector from 'i18next-browser-languagedetector'

i18n
  .use(Backend)
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    fallbackLng: 'en',
    debug: true,
    
    interpolation: {
      escapeValue: false
    },
    
    backend: {
      loadPath: '/locales/{{lng}}/{{ns}}.json'
    }
  })
```

### 8. Namespaces
```typescript
// Exemplo de namespaces
import { useTranslation } from 'react-i18next'

function Dashboard() {
  const { t } = useTranslation(['common', 'dashboard'])
  
  return (
    <div>
      <h1>{t('common:welcome')}</h1>
      <p>{t('dashboard:stats')}</p>
    </div>
  )
}
```

### 9. Direção do Texto
```typescript
// Exemplo de direção do texto
import { useTranslation } from 'react-i18next'

function TextDirection() {
  const { i18n } = useTranslation()
  
  const isRTL = i18n.language === 'ar'
  
  return (
    <div dir={isRTL ? 'rtl' : 'ltr'}>
      <p>Conteúdo do texto</p>
    </div>
  )
}
```

### 10. Boas Práticas
- Use chaves de tradução consistentes
- Mantenha traduções organizadas
- Evite strings hardcoded
- Suporte RTL quando necessário
- Teste em diferentes idiomas
- Mantenha contexto nas traduções
- Use placeholders para variáveis
- Documente strings de tradução
- Implemente fallback
- Monitore traduções faltantes


