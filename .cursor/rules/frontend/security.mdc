---
description: 
globs: 
alwaysApply: false
---
# Segurança Frontend

## Princípios Fundamentais

### 1. Prevenção XSS
```typescript
// Exemplo de prevenção XSS
import DOMPurify from 'dompurify'

function SafeContent({ content }) {
  const sanitizedContent = DOMPurify.sanitize(content)
  
  return (
    <div
      dangerouslySetInnerHTML={{ __html: sanitizedContent }}
    />
  )
}

// Exemplo de escape de conteúdo
function EscapedContent({ content }) {
  return <div>{content}</div>
}
```

### 2. CSRF Protection
```typescript
// Exemplo de proteção CSRF
import { csrf } from './csrf'

async function submitForm(data) {
  const response = await fetch('/api/submit', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrf.getToken()
    },
    body: JSON.stringify(data)
  })
  
  return response.json()
}
```

### 3. Content Security Policy
```typescript
// Exemplo de configuração CSP
const cspConfig = {
  'default-src': ["'self'"],
  'script-src': ["'self'", "'unsafe-inline'"],
  'style-src': ["'self'", "'unsafe-inline'"],
  'img-src': ["'self'", 'data:', 'https:'],
  'connect-src': ["'self'", 'https://api.example.com'],
  'font-src': ["'self'", 'https://fonts.gstatic.com'],
  'object-src': ["'none'"],
  'media-src': ["'self'"],
  'frame-src': ["'none'"]
}

// Exemplo de middleware CSP
function cspMiddleware(req, res, next) {
  const cspHeader = Object.entries(cspConfig)
    .map(([key, value]) => `${key} ${value.join(' ')}`)
    .join('; ')
  
  res.setHeader('Content-Security-Policy', cspHeader)
  next()
}
```

### 4. Sanitização de Input
```typescript
// Exemplo de sanitização de input
import { z } from 'zod'

const userSchema = z.object({
  name: z.string().min(2).max(50),
  email: z.string().email(),
  age: z.number().min(0).max(120)
})

function UserForm() {
  const handleSubmit = async (data) => {
    try {
      const validatedData = userSchema.parse(data)
      await submitUser(validatedData)
    } catch (error) {
      console.error('Validation error:', error)
    }
  }
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
    </form>
  )
}
```

### 5. Autenticação Segura
```typescript
// Exemplo de autenticação segura
import { useAuth } from './auth'

function LoginForm() {
  const { login } = useAuth()
  
  const handleSubmit = async (data) => {
    try {
      await login(data.email, data.password)
    } catch (error) {
      console.error('Login failed:', error)
    }
  }
  
  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        name="email"
        required
        autoComplete="email"
      />
      <input
        type="password"
        name="password"
        required
        autoComplete="current-password"
      />
      <button type="submit">Login</button>
    </form>
  )
}
```

### 6. Proteção de Dados Sensíveis
```typescript
// Exemplo de proteção de dados sensíveis
function SensitiveData({ data }) {
  const [isVisible, setIsVisible] = useState(false)
  
  return (
    <div>
      {isVisible ? (
        <div>{data}</div>
      ) : (
        <div>••••••••</div>
      )}
      <button onClick={() => setIsVisible(!isVisible)}>
        {isVisible ? 'Ocultar' : 'Mostrar'}
      </button>
    </div>
  )
}
```

### 7. Headers de Segurança
```typescript
// Exemplo de headers de segurança
const securityHeaders = {
  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
  'X-Content-Type-Options': 'nosniff',
  'X-Frame-Options': 'DENY',
  'X-XSS-Protection': '1; mode=block',
  'Referrer-Policy': 'strict-origin-when-cross-origin',
  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()'
}

// Exemplo de middleware de headers
function securityHeadersMiddleware(req, res, next) {
  Object.entries(securityHeaders).forEach(([key, value]) => {
    res.setHeader(key, value)
  })
  next()
}
```

### 8. Validação de Dados
```typescript
// Exemplo de validação de dados
import { z } from 'zod'

const formSchema = z.object({
  username: z.string()
    .min(3)
    .max(20)
    .regex(/^[a-zA-Z0-9_]+$/),
  password: z.string()
    .min(8)
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/),
  email: z.string().email()
})

function RegistrationForm() {
  const handleSubmit = async (data) => {
    try {
      const validatedData = formSchema.parse(data)
      await registerUser(validatedData)
    } catch (error) {
      console.error('Validation error:', error)
    }
  }
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
    </form>
  )
}
```

### 9. Proteção contra Ataques
- Rate limiting
- Input validation
- Output encoding
- Secure cookies
- HTTPS only
- CORS configuration
- File upload security
- API security
- Session management
- Error handling

### 10. Boas Práticas
- Mantenha dependências atualizadas
- Use HTTPS
- Implemente autenticação forte
- Valide todos os inputs
- Sanitize outputs
- Use headers de segurança
- Implemente CSP
- Proteja dados sensíveis
- Monitore vulnerabilidades
- Faça auditorias regulares

