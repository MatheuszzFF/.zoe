---
description: 
globs: 
alwaysApply: false
---
# Arquitetura Frontend

## Princípios Fundamentais

### 1. Estrutura de Diretórios
```bash
src/
  ├── app/              # Páginas e rotas
  │   ├── (auth)/      # Rotas de autenticação
  │   ├── (internal)/  # Rotas internas
  │   └── api/         # Rotas da API
  ├── components/      # Componentes React
  │   ├── ui/         # Componentes base
  │   └── modals/     # Modais
  ├── contexts/       # Contextos React
  ├── hooks/          # Custom hooks
  ├── lib/            # Utilitários
  └── types/          # Tipos TypeScript
```

### 2. Padrões de Projeto
- Atomic Design
- Container/Presentational
- Higher-Order Components
- Render Props
- Custom Hooks

### 3. Gerenciamento de Estado
```typescript
// Exemplo de Context
interface AppState {
  theme: 'light' | 'dark'
  user: User | null
}

const AppContext = createContext<AppState | undefined>(undefined)

export function AppProvider({ children }: { children: React.ReactNode }) {
  const [state, setState] = useState<AppState>({
    theme: 'light',
    user: null
  })

  return (
    <AppContext.Provider value={state}>
      {children}
    </AppContext.Provider>
  )
}
```

### 4. Roteamento
- Rotas declarativas
- Lazy loading
- Middleware de autenticação
- Tratamento de erros
- Breadcrumbs

### 5. Performance
- Code splitting
- Lazy loading
- Memoização
- Virtualização
- Bundle optimization

### 6. Testes
```typescript
// Exemplo de teste
describe('Button', () => {
  it('should render correctly', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByText('Click me')).toBeInTheDocument()
  })

  it('should handle click', () => {
    const onClick = jest.fn()
    render(<Button onClick={onClick}>Click me</Button>)
    fireEvent.click(screen.getByText('Click me'))
    expect(onClick).toHaveBeenCalled()
  })
})
```

### 7. Acessibilidade
- Semântica HTML
- ARIA labels
- Keyboard navigation
- Screen readers
- Color contrast

### 8. Internacionalização
```typescript
// Exemplo de i18n
const messages = {
  pt: {
    welcome: 'Bem-vindo',
    login: 'Entrar'
  },
  en: {
    welcome: 'Welcome',
    login: 'Login'
  }
}

const t = useTranslation()
return <h1>{t('welcome')}</h1>
```

### 9. Estilização
- CSS-in-JS ou CSS Modules
- Design System
- Theming
- Responsividade
- Animations

### 10. Segurança
- XSS prevention
- CSRF protection
- Content Security Policy
- Input sanitization
- Secure headers

