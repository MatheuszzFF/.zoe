---
description:
globs:
alwaysApply: false
---
# Testes Frontend

## Princípios Fundamentais

### 1. Testes Unitários
```typescript
// Exemplo de teste unitário
import { render, screen, fireEvent } from '@testing-library/react'
import { Button } from './Button'

describe('Button', () => {
  it('renders correctly', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByText('Click me')).toBeInTheDocument()
  })
  
  it('handles click events', () => {
    const handleClick = jest.fn()
    render(<Button onClick={handleClick}>Click me</Button>)
    fireEvent.click(screen.getByText('Click me'))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })
  
  it('can be disabled', () => {
    render(<Button disabled>Click me</Button>)
    expect(screen.getByText('Click me')).toBeDisabled()
  })
})
```

### 2. Testes de Integração
```typescript
// Exemplo de teste de integração
import { render, screen, waitFor } from '@testing-library/react'
import { UserProfile } from './UserProfile'
import { api } from './api'

jest.mock('./api')

describe('UserProfile', () => {
  it('loads and displays user data', async () => {
    const mockUser = {
      id: 1,
      name: 'John Doe',
      email: 'john@example.com'
    }
    
    api.getUser.mockResolvedValue(mockUser)
    
    render(<UserProfile userId={1} />)
    
    expect(screen.getByText('Loading...')).toBeInTheDocument()
    
    await waitFor(() => {
      expect(screen.getByText(mockUser.name)).toBeInTheDocument()
      expect(screen.getByText(mockUser.email)).toBeInTheDocument()
    })
  })
})
```

### 3. Testes E2E
```typescript
// Exemplo de teste E2E com Cypress
describe('User Authentication', () => {
  it('allows user to login', () => {
    cy.visit('/login')
    
    cy.get('[data-testid="email"]').type('user@example.com')
    cy.get('[data-testid="password"]').type('password123')
    cy.get('[data-testid="submit"]').click()
    
    cy.url().should('include', '/dashboard')
    cy.get('[data-testid="welcome-message"]')
      .should('contain', 'Welcome back')
  })
})
```

### 4. Mocks e Stubs
```typescript
// Exemplo de mock
jest.mock('./api', () => ({
  api: {
    getUser: jest.fn(),
    updateUser: jest.fn()
  }
}))

// Exemplo de stub
const mockUser = {
  id: 1,
  name: 'John Doe',
  email: 'john@example.com'
}

api.getUser.mockResolvedValue(mockUser)
```

### 5. Testes de Snapshot
```typescript
// Exemplo de teste de snapshot
import { render } from '@testing-library/react'
import { Button } from './Button'

describe('Button', () => {
  it('matches snapshot', () => {
    const { container } = render(<Button>Click me</Button>)
    expect(container).toMatchSnapshot()
  })
})
```

### 6. Testes de Acessibilidade
```typescript
// Exemplo de teste de acessibilidade
import { render } from '@testing-library/react'
import { axe, toHaveNoViolations } from 'jest-axe'
import { Button } from './Button'

expect.extend(toHaveNoViolations)

describe('Button', () => {
  it('should not have accessibility violations', async () => {
    const { container } = render(<Button>Click me</Button>)
    const results = await axe(container)
    expect(results).toHaveNoViolations()
  })
})
```

### 7. Testes de Performance
```typescript
// Exemplo de teste de performance
import { render } from '@testing-library/react'
import { Button } from './Button'

describe('Button', () => {
  it('renders within performance budget', () => {
    const start = performance.now()
    render(<Button>Click me</Button>)
    const end = performance.now()
    
    expect(end - start).toBeLessThan(100) // 100ms budget
  })
})
```

### 8. Cobertura de Testes
- Jest coverage
- Code coverage thresholds
- Coverage reports
- Coverage badges
- Coverage configuration

### 9. Testes de Estado
```typescript
// Exemplo de teste de estado
import { render, screen, fireEvent } from '@testing-library/react'
import { Counter } from './Counter'

describe('Counter', () => {
  it('increments count', () => {
    render(<Counter />)
    
    expect(screen.getByText('Count: 0')).toBeInTheDocument()
    
    fireEvent.click(screen.getByText('Increment'))
    
    expect(screen.getByText('Count: 1')).toBeInTheDocument()
  })
})
```

### 10. Boas Práticas
- Testes isolados
- Testes determinísticos
- Testes rápidos
- Testes manuteníveis
- Testes significativos
