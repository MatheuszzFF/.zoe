---
description: 
globs: 
alwaysApply: false
---
# Performance Frontend

## Princípios Fundamentais

### 1. Code Splitting
```typescript
// Exemplo de code splitting
import { lazy, Suspense } from 'react'

const HeavyComponent = lazy(() => import('./HeavyComponent'))

function App() {
  return (
    <Suspense fallback={<Loading />}>
      <HeavyComponent />
    </Suspense>
  )
}
```

### 2. Lazy Loading
```typescript
// Exemplo de lazy loading de imagens
function ImageGallery() {
  return (
    <div>
      <img
        src="/image1.jpg"
        loading="lazy"
        alt="Imagem 1"
        width={800}
        height={600}
      />
      
      <img
        src="/image2.jpg"
        loading="lazy"
        alt="Imagem 2"
        width={800}
        height={600}
      />
    </div>
  )
}
```

### 3. Memoização
```typescript
// Exemplo de memoização
import { memo, useMemo, useCallback } from 'react'

const ExpensiveComponent = memo(function Component({ data }) {
  return <div>{data}</div>
})

function ParentComponent() {
  const [items, setItems] = useState([])
  
  const sortedItems = useMemo(() => {
    return items.sort((a, b) => a.name.localeCompare(b.name))
  }, [items])
  
  const handleClick = useCallback(() => {
    console.log('clicked')
  }, [])
  
  return (
    <div>
      <ExpensiveComponent data={sortedItems} />
      <button onClick={handleClick}>Click me</button>
    </div>
  )
}
```

### 4. Virtualização
```typescript
// Exemplo de virtualização
import { FixedSizeList } from 'react-window'

function VirtualizedList({ items }) {
  const Row = ({ index, style }) => (
    <div style={style}>
      {items[index].name}
    </div>
  )
  
  return (
    <FixedSizeList
      height={400}
      width={600}
      itemCount={items.length}
      itemSize={50}
    >
      {Row}
    </FixedSizeList>
  )
}
```

### 5. Otimização de Bundle
```typescript
// Exemplo de otimização de bundle
import { webpack } from 'webpack'

const config = {
  optimization: {
    splitChunks: {
      chunks: 'all',
      minSize: 20000,
      maxSize: 244000,
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          chunks: 'all'
        }
      }
    }
  }
}
```

### 6. Caching
```typescript
// Exemplo de caching
import { useQuery } from 'react-query'

function UserProfile({ userId }) {
  const { data, isLoading } = useQuery(
    ['user', userId],
    () => fetchUser(userId),
    {
      staleTime: 5 * 60 * 1000, // 5 minutos
      cacheTime: 30 * 60 * 1000 // 30 minutos
    }
  )
  
  if (isLoading) return <Loading />
  
  return <div>{data.name}</div>
}
```

### 7. Otimização de Imagens
```typescript
// Exemplo de otimização de imagens
function OptimizedImage({ src, alt }) {
  return (
    <picture>
      <source
        srcSet={`${src}.webp`}
        type="image/webp"
      />
      <source
        srcSet={`${src}.jpg`}
        type="image/jpeg"
      />
      <img
        src={`${src}.jpg`}
        alt={alt}
        loading="lazy"
        width={800}
        height={600}
      />
    </picture>
  )
}
```

### 8. Performance Monitoring
```typescript
// Exemplo de monitoramento de performance
import { useEffect } from 'react'

function PerformanceMonitor() {
  useEffect(() => {
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        console.log(`${entry.name}: ${entry.duration}`)
      }
    })
    
    observer.observe({ entryTypes: ['measure'] })
    
    return () => observer.disconnect()
  }, [])
  
  return null
}
```

### 9. Otimização de Renderização
```typescript
// Exemplo de otimização de renderização
function OptimizedList({ items }) {
  return (
    <div>
      {items.map(item => (
        <MemoizedItem
          key={item.id}
          item={item}
        />
      ))}
    </div>
  )
}

const MemoizedItem = memo(function Item({ item }) {
  return <div>{item.name}</div>
})
```

### 10. Boas Práticas
- Minimize JavaScript
- Otimize CSS
- Comprima assets
- Use CDN
- Implemente cache
- Monitore performance
- Otimize carregamento
- Reduza requisições
- Implemente PWA
- Use service workers

