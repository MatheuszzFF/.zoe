---
description:
globs:
alwaysApply: false
---
# Formulários Frontend

## Princípios Fundamentais

### 1. Validação de Formulários
```typescript
// Exemplo de validação de formulários
import { useForm } from 'react-hook-form'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'

const schema = z.object({
  name: z.string().min(2, 'Nome deve ter no mínimo 2 caracteres'),
  email: z.string().email('Email inválido'),
  password: z.string()
    .min(8, 'Senha deve ter no mínimo 8 caracteres')
    .regex(/[A-Z]/, 'Senha deve conter uma letra maiúscula')
    .regex(/[a-z]/, 'Senha deve conter uma letra minúscula')
    .regex(/[0-9]/, 'Senha deve conter um número')
})

type FormData = z.infer<typeof schema>

function RegistrationForm() {
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<FormData>({
    resolver: zodResolver(schema)
  })
  
  const onSubmit = (data: FormData) => {
    console.log(data)
  }
  
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label htmlFor="name">Nome</label>
        <input
          id="name"
          {...register('name')}
        />
        {errors.name && (
          <span>{errors.name.message}</span>
        )}
      </div>
      
      <div>
        <label htmlFor="email">Email</label>
        <input
          id="email"
          type="email"
          {...register('email')}
        />
        {errors.email && (
          <span>{errors.email.message}</span>
        )}
      </div>
      
      <div>
        <label htmlFor="password">Senha</label>
        <input
          id="password"
          type="password"
          {...register('password')}
        />
        {errors.password && (
          <span>{errors.password.message}</span>
        )}
      </div>
      
      <button type="submit">Registrar</button>
    </form>
  )
}
```

### 2. Campos Controlados
```typescript
// Exemplo de campos controlados
import { useState } from 'react'

function ControlledForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: ''
  })
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    console.log(formData)
  }
  
  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Nome</label>
        <input
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
      </div>
      
      <div>
        <label htmlFor="email">Email</label>
        <input
          id="email"
          name="email"
          type="email"
          value={formData.email}
          onChange={handleChange}
        />
      </div>
      
      <button type="submit">Enviar</button>
    </form>
  )
}
```

### 3. Upload de Arquivos
```typescript
// Exemplo de upload de arquivos
import { useCallback } from 'react'
import { useDropzone } from 'react-dropzone'

function FileUpload() {
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const formData = new FormData()
    acceptedFiles.forEach(file => {
      formData.append('files', file)
    })
    
    // Enviar arquivos
    fetch('/api/upload', {
      method: 'POST',
      body: formData
    })
  }, [])
  
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.png', '.jpg', '.jpeg'],
      'application/pdf': ['.pdf']
    }
  })
  
  return (
    <div {...getRootProps()}>
      <input {...getInputProps()} />
      {isDragActive ? (
        <p>Solte os arquivos aqui...</p>
      ) : (
        <p>Arraste arquivos ou clique para selecionar</p>
      )}
    </div>
  )
}
```

### 4. Formulários Dinâmicos
```typescript
// Exemplo de formulários dinâmicos
import { useFieldArray } from 'react-hook-form'

function DynamicForm() {
  const { register, control } = useForm({
    defaultValues: {
      items: [{ name: '' }]
    }
  })
  
  const { fields, append, remove } = useFieldArray({
    control,
    name: 'items'
  })
  
  return (
    <form>
      {fields.map((field, index) => (
        <div key={field.id}>
          <input
            {...register(`items.${index}.name`)}
          />
          <button
            type="button"
            onClick={() => remove(index)}
          >
            Remover
          </button>
        </div>
      ))}
      
      <button
        type="button"
        onClick={() => append({ name: '' })}
      >
        Adicionar Item
      </button>
    </form>
  )
}
```

### 5. Máscaras de Input
```typescript
// Exemplo de máscaras de input
import { IMaskInput } from 'react-imask'

function MaskedInput() {
  return (
    <div>
      <label htmlFor="phone">Telefone</label>
      <IMaskInput
        id="phone"
        mask="(00) 00000-0000"
        placeholder="(00) 00000-0000"
      />
      
      <label htmlFor="cpf">CPF</label>
      <IMaskInput
        id="cpf"
        mask="000.000.000-00"
        placeholder="000.000.000-00"
      />
      
      <label htmlFor="date">Data</label>
      <IMaskInput
        id="date"
        mask="00/00/0000"
        placeholder="00/00/0000"
      />
    </div>
  )
}
```

### 6. Autocomplete
```typescript
// Exemplo de autocomplete
import { useState } from 'react'
import { Combobox } from '@headlessui/react'

function Autocomplete() {
  const [query, setQuery] = useState('')
  const [selected, setSelected] = useState(null)
  
  const filteredItems = items.filter(item =>
    item.name.toLowerCase().includes(query.toLowerCase())
  )
  
  return (
    <Combobox value={selected} onChange={setSelected}>
      <Combobox.Input
        onChange={(e) => setQuery(e.target.value)}
        displayValue={(item) => item?.name}
      />
      
      <Combobox.Options>
        {filteredItems.map((item) => (
          <Combobox.Option
            key={item.id}
            value={item}
          >
            {item.name}
          </Combobox.Option>
        ))}
      </Combobox.Options>
    </Combobox>
  )
}
```

### 7. Validação em Tempo Real
```typescript
// Exemplo de validação em tempo real
import { useForm } from 'react-hook-form'

function RealTimeValidation() {
  const {
    register,
    formState: { errors, isDirty }
  } = useForm({
    mode: 'onChange'
  })
  
  return (
    <form>
      <div>
        <label htmlFor="email">Email</label>
        <input
          id="email"
          type="email"
          {...register('email', {
            required: 'Email é obrigatório',
            pattern: {
              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
              message: 'Email inválido'
            }
          })}
        />
        {isDirty && errors.email && (
          <span>{errors.email.message}</span>
        )}
      </div>
    </form>
  )
}
```

### 8. Formulários Multi-etapa
```typescript
// Exemplo de formulários multi-etapa
import { useState } from 'react'

function MultiStepForm() {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({})
  
  const nextStep = () => setStep(step + 1)
  const prevStep = () => setStep(step - 1)
  
  return (
    <div>
      {step === 1 && (
        <PersonalInfo
          formData={formData}
          setFormData={setFormData}
          nextStep={nextStep}
        />
      )}
      
      {step === 2 && (
        <AddressInfo
          formData={formData}
          setFormData={setFormData}
          nextStep={nextStep}
          prevStep={prevStep}
        />
      )}
      
      {step === 3 && (
        <Review
          formData={formData}
          prevStep={prevStep}
          submit={handleSubmit}
        />
      )}
    </div>
  )
}
```

### 9. Formulários Acessíveis
```typescript
// Exemplo de formulários acessíveis
function AccessibleForm() {
  return (
    <form>
      <div>
        <label htmlFor="name">Nome</label>
        <input
          id="name"
          type="text"
          aria-required="true"
          aria-invalid={errors.name ? 'true' : 'false'}
          aria-describedby={errors.name ? 'name-error' : undefined}
        />
        {errors.name && (
          <span id="name-error" role="alert">
            {errors.name.message}
          </span>
        )}
      </div>
      
      <div>
        <label htmlFor="email">Email</label>
        <input
          id="email"
          type="email"
          aria-required="true"
          aria-invalid={errors.email ? 'true' : 'false'}
          aria-describedby={errors.email ? 'email-error' : undefined}
        />
        {errors.email && (
          <span id="email-error" role="alert">
            {errors.email.message}
          </span>
        )}
      </div>
    </form>
  )
}
```

### 10. Boas Práticas
- Use validação de formulários
- Implemente feedback visual
- Mantenha formulários acessíveis
- Use máscaras quando necessário
- Implemente autocomplete
- Valide em tempo real
- Trate erros adequadamente
- Use campos controlados
- Implemente multi-etapa
- Documente regras de validação
