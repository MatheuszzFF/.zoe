---
description: 
globs: 
alwaysApply: false
---
# Gerenciamento de Estado Frontend

## Princípios Fundamentais

### 1. Context API
```typescript
// Exemplo de Context API
import { createContext, useContext, useReducer } from 'react'

type State = {
  count: number
  user: User | null
}

type Action =
  | { type: 'INCREMENT' }
  | { type: 'DECREMENT' }
  | { type: 'SET_USER'; payload: User }

const initialState: State = {
  count: 0,
  user: null
}

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 }
    case 'DECREMENT':
      return { ...state, count: state.count - 1 }
    case 'SET_USER':
      return { ...state, user: action.payload }
    default:
      return state
  }
}

const AppContext = createContext<{
  state: State
  dispatch: React.Dispatch<Action>
} | null>(null)

export function AppProvider({ children }: { children: React.ReactNode }) {
  const [state, dispatch] = useReducer(reducer, initialState)
  
  return (
    <AppContext.Provider value={{ state, dispatch }}>
      {children}
    </AppContext.Provider>
  )
}

export function useApp() {
  const context = useContext(AppContext)
  if (!context) {
    throw new Error('useApp must be used within AppProvider')
  }
  return context
}
```

### 2. Redux
```typescript
// Exemplo de Redux
import { createSlice, configureStore } from '@reduxjs/toolkit'

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    increment: (state) => {
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    }
  }
})

const store = configureStore({
  reducer: {
    counter: counterSlice.reducer
  }
})

export const { increment, decrement } = counterSlice.actions

export function Counter() {
  const count = useSelector((state) => state.counter.value)
  const dispatch = useDispatch()
  
  return (
    <div>
      <button onClick={() => dispatch(decrement())}>-</button>
      <span>{count}</span>
      <button onClick={() => dispatch(increment())}>+</button>
    </div>
  )
}
```

### 3. Zustand
```typescript
// Exemplo de Zustand
import create from 'zustand'

interface Store {
  count: number
  increment: () => void
  decrement: () => void
}

const useStore = create<Store>((set) => ({
  count: 0,
  increment: () => set((state) => ({ count: state.count + 1 })),
  decrement: () => set((state) => ({ count: state.count - 1 }))
}))

function Counter() {
  const { count, increment, decrement } = useStore()
  
  return (
    <div>
      <button onClick={decrement}>-</button>
      <span>{count}</span>
      <button onClick={increment}>+</button>
    </div>
  )
}
```

### 4. Jotai
```typescript
// Exemplo de Jotai
import { atom, useAtom } from 'jotai'

const countAtom = atom(0)

function Counter() {
  const [count, setCount] = useAtom(countAtom)
  
  return (
    <div>
      <button onClick={() => setCount(c => c - 1)}>-</button>
      <span>{count}</span>
      <button onClick={() => setCount(c => c + 1)}>+</button>
    </div>
  )
}
```

### 5. Recoil
```typescript
// Exemplo de Recoil
import { atom, useRecoilState } from 'recoil'

const countState = atom({
  key: 'countState',
  default: 0
})

function Counter() {
  const [count, setCount] = useRecoilState(countState)
  
  return (
    <div>
      <button onClick={() => setCount(c => c - 1)}>-</button>
      <span>{count}</span>
      <button onClick={() => setCount(c => c + 1)}>+</button>
    </div>
  )
}
```

### 6. MobX
```typescript
// Exemplo de MobX
import { makeAutoObservable } from 'mobx'
import { observer } from 'mobx-react-lite'

class Store {
  count = 0
  
  constructor() {
    makeAutoObservable(this)
  }
  
  increment() {
    this.count++
  }
  
  decrement() {
    this.count--
  }
}

const store = new Store()

const Counter = observer(() => {
  return (
    <div>
      <button onClick={() => store.decrement()}>-</button>
      <span>{store.count}</span>
      <button onClick={() => store.increment()}>+</button>
    </div>
  )
})
```

### 7. Estado Local
```typescript
// Exemplo de estado local
import { useState } from 'react'

function Counter() {
  const [count, setCount] = useState(0)
  
  return (
    <div>
      <button onClick={() => setCount(c => c - 1)}>-</button>
      <span>{count}</span>
      <button onClick={() => setCount(c => c + 1)}>+</button>
    </div>
  )
}
```

### 8. Estado Compartilhado
```typescript
// Exemplo de estado compartilhado
import { create } from 'zustand'

interface SharedState {
  theme: 'light' | 'dark'
  setTheme: (theme: 'light' | 'dark') => void
}

const useSharedState = create<SharedState>((set) => ({
  theme: 'light',
  setTheme: (theme) => set({ theme })
}))

function ThemeSwitcher() {
  const { theme, setTheme } = useSharedState()
  
  return (
    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>
      Toggle theme
    </button>
  )
}
```

### 9. Persistência de Estado
```typescript
// Exemplo de persistência de estado
import { persist } from 'zustand/middleware'

const useStore = create(
  persist(
    (set) => ({
      count: 0,
      increment: () => set((state) => ({ count: state.count + 1 })),
      decrement: () => set((state) => ({ count: state.count - 1 }))
    }),
    {
      name: 'app-storage'
    }
  )
)
```

### 10. Boas Práticas
- Escolha a ferramenta adequada
- Mantenha o estado mínimo
- Evite duplicação de estado
- Use imutabilidade
- Implemente memoização
- Separe lógica de UI
- Use TypeScript
- Documente o estado
- Teste o estado
- Monitore performance

