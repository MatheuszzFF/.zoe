{
  "_metadata": {
    "action_name": "context-checker",
    "version": "2.0",
    "format": "json",
    "description": "Verifica√ß√£o AUTOM√ÅTICA e INTELIGENTE de contexto - SEMPRE executada",
    "created": "2025-01-20",
    "updated": "2025-06-10",
    "phase": "2.0 - Smart Detection",
    "ai_optimized": true
  },
  
  "trigger": {
    "patterns": [
      "IMEDIATO: Qualquer comando que mencione projeto ou 'zoe iniciar'",
      "SEMPRE antes de qualquer comando ou resposta",
      "zoe iniciar [projeto]",
      "zoe, iniciar [projeto]"
    ],
    "automatic": true,
    "priority_level": 0,
    "category": "context-management",
    "mandatory": true,
    "blocking": true
  },

  "smart_detection": {
    "description": "Sistema inteligente de detec√ß√£o autom√°tica - 90% menos perguntas",
    "auto_analysis": [
      {
        "source": "package.json",
        "fields": ["name", "description", "dependencies", "devDependencies"],
        "detection_rules": {
          "project_name": "name field or folder name",
          "framework": "next in deps = Next.js, react = React",
          "language": "typescript in deps = TypeScript, @types/* = TypeScript",
          "styling": "tailwindcss = Tailwind, styled-components = Styled Components",
          "database": "prisma = Prisma ORM, @supabase = Supabase",
          "testing": "jest = Jest, vitest = Vitest, @testing-library = Testing Library"
        }
      },
      {
        "source": "file_structure",
        "patterns": {
          "src/app/": "Next.js App Router",
          "src/pages/": "Next.js Pages Router",
          "prisma/": "Prisma ORM detected",
          "tailwind.config.js": "Tailwind CSS detected",
          "tsconfig.json": "TypeScript detected"
        }
      },
      {
        "source": "existing_context",
        "check": ".zoe/rules/context/projects/*/project-context.json",
        "merge_strategy": "extend existing, don't overwrite"
      }
    ],
    "intelligence_rules": [
      "NUNCA perguntar sobre stack j√° detectada automaticamente",
      "APENAS perguntar sobre objetivos se n√£o conseguir inferir",
      "Usar nomes de pastas como fallback para nome do projeto",
      "Inferir tipo de projeto baseado na estrutura de pastas",
      "Manter contexto existente, apenas complementar"
    ]
  },

  "behavior": {
    "description": "Verifica√ß√£o autom√°tica e cria√ß√£o inteligente de estrutura de contexto",
    "critical_rule": "DETECTAR M√ÅXIMO AUTOMATICAMENTE, PERGUNTAR M√çNIMO",
    "execution_steps": [
      {
        "step": 0,
        "action": "get_current_date",
        "description": "Obter data atual automaticamente via comando date",
        "auto_execution": [
          "1. EXECUTE command 'date +%Y-%m-%d' in terminal",
          "2. CAPTURE current date from output", 
          "3. SET global variable [CURRENT_DATE] for use in all operations",
          "4. LOG date capture for context reference"
        ],
        "command": "date +%Y-%m-%d",
        "purpose": "Sempre saber a data atual antes de iniciar qualquer opera√ß√£o",
        "output_format": "YYYY-MM-DD",
        "required": true,
        "blocking": false
      },
      {
        "step": 1,
        "action": "smart_project_detection",
        "description": "Detec√ß√£o inteligente do projeto e contexto",
        "auto_detection": [
          "1. EXTRACT project name from command using improved regex",
          "2. IF no explicit project: analyze current working directory",
          "3. CHECK package.json for project name and stack info",
          "4. SCAN file structure for framework/technology patterns",
          "5. LOAD existing project-context.json if exists",
          "6. MERGE detected info with existing context (don't overwrite)"
        ],
        "improved_regex": [
          "(?:zoe,?\\s+)?iniciar\\s+([a-zA-Z0-9-_]+)",
          "(?:set project|projeto)\\s+([a-zA-Z0-9-_]+)",
          "working on\\s+([a-zA-Z0-9-_]+)",
          "projeto\\s+([a-zA-Z0-9-_]+)"
        ]
      },
      {
        "step": 2,
        "action": "intelligent_stack_detection",
        "description": "Detec√ß√£o autom√°tica completa da stack tecnol√≥gica",
        "detection_methods": [
          {
            "method": "package_json_analysis",
            "confidence": "high",
            "patterns": {
              "next": {"framework": "Next.js", "version": "extract from package.json"},
              "react": {"framework": "React", "version": "extract from package.json"},
              "typescript": {"language": "TypeScript"},
              "@types/": {"language": "TypeScript"},
              "tailwindcss": {"styling": "Tailwind CSS"},
              "styled-components": {"styling": "Styled Components"},
              "prisma": {"database": "Prisma ORM"},
              "@supabase/supabase-js": {"auth": "Supabase", "database": "Supabase"},
              "jest": {"testing": "Jest"},
              "vitest": {"testing": "Vitest"},
              "@testing-library": {"testing": "Testing Library"}
            }
          },
          {
            "method": "file_structure_scan",
            "confidence": "medium",
            "scan_patterns": [
              "src/app/ ‚Üí Next.js App Router",
              "src/pages/ ‚Üí Next.js Pages Router",
              "prisma/schema.prisma ‚Üí Prisma ORM",
              "tailwind.config.js ‚Üí Tailwind CSS",
              "supabase/ ‚Üí Supabase integration"
            ]
          }
        ]
      },
      {
        "step": 3,
        "action": "mcp_context_enrichment",
        "description": "Enriquecimento do contexto com conhecimento MCP",
        "mcp_integration": {
          "search_queries": [
            "Buscar informa√ß√µes sobre projeto [nome_projeto]",
            "Buscar padr√µes e decis√µes arquiteturais do projeto",
            "Buscar hist√≥rico de desenvolvimento e componentes criados",
            "Buscar stack tecnol√≥gica e configura√ß√µes estabelecidas",
            "Buscar problemas resolvidos e solu√ß√µes aplicadas"
          ],
          "knowledge_application": [
            "Enriquecer tech_stack com informa√ß√µes MCP",
            "Complementar objectives com conhecimento hist√≥rico",
            "Adicionar component_history se dispon√≠vel no MCP",
            "Incluir architectural_decisions conhecidas",
            "Preservar learning_insights acumulados"
          ],
          "merge_strategy": "MCP conhecimento + detec√ß√£o autom√°tica + contexto existente"
        }
      },
      {
        "step": 4,
        "action": "context_sync_and_merge",
        "description": "Sincroniza√ß√£o inteligente de contexto",
        "merge_strategy": {
          "existing_context": "Load and preserve existing project-context.json",
          "detected_info": "Merge detected stack info without overwriting user data",
          "user_objectives": "Keep existing objectives, only suggest if empty",
          "created_components": "Preserve component history and decisions",
          "architectural_decisions": "Keep all existing decisions"
        },
        "smart_updates": [
          "Update tech_stack only if detection confidence > existing",
          "Add new detected technologies to existing stack",
          "Preserve user-defined project objectives and preferences",
          "Update last_updated timestamp only",
          "Log detection method and confidence level"
        ]
      },
      {
        "step": 5,
        "action": "minimal_user_interaction",
        "description": "Reduzir intera√ß√£o com usu√°rio ao m√≠nimo essencial",
        "interaction_rules": [
          "ONLY ask if detection confidence < 70%",
          "ONLY ask about objectives if completely empty and can't infer",  
          "NEVER ask about detected stack technologies",
          "NEVER ask about project name if extracted from command/folder",
          "AUTO-CONFIRM detected information with user"
        ],
        "fallback_questions": [
          {
            "condition": "objectives.length === 0 && cannot_infer_from_structure",
            "question": "üéØ Qual o objetivo principal deste projeto?",
            "optional": true,
            "default": "Projeto em desenvolvimento"
          }
        ]
      },
      {
        "step": 6,
        "action": "create_enhanced_structure",
        "description": "Cria√ß√£o autom√°tica de estrutura melhorada",
        "always_create": [
          ".zoe/rules/context/projects/[projeto]/",
          ".zoe/rules/context/projects/[projeto]/progress/",
          ".zoe/rules/context/projects/[projeto]/progress/[hoje]/",
          ".zoe/rules/context/projects/[projeto]/project-context.json"
        ],
        "enhanced_features": [
          "Auto-populate project-context.json with detected info",
          "Create daily progress with detected stack context",
          "Generate suggested next actions based on project type",
          "Create component tracking if design system detected"
        ]
      }
    ]
  },

  "templates": {
    "project_context_template": {
      "metadata": {
        "version": "1.0",
        "created": "[timestamp]",
        "project_name": "[nome-projeto]",
        "description": "Auto-gerado pelo context-checker",
        "detection_method": "command_parsing + package.json_analysis"
      },
      "project_overview": {
        "name": "[nome-projeto]",
        "type": "Detectado automaticamente",
        "objectives": ["Extra√≠do do package.json ou definir manualmente"],
        "current_phase": "Context criado automaticamente",
        "priority_focus": "Setup e inicializa√ß√£o"
      },
      "tech_stack": {
        "auto_detected": true,
        "detection_source": "package.json analysis",
        "detection_patterns": [
          "next: Next.js detectado",
          "react: React detectado", 
          "typescript: TypeScript detectado",
          "prisma: Prisma ORM detectado",
          "@supabase: Supabase detectado"
        ]
      },
      "context_creation": {
        "triggered_by": "context-checker automatic detection",
        "project_name_source": "[comando_usuario | package.json | folder_name]",
        "needs_validation": true
      }
    },
    "folder_structure": {
      "created_structure": [
        ".zoe/rules/context/projects/[projeto]/",
        "‚îú‚îÄ‚îÄ project-context.json",
        "‚îî‚îÄ‚îÄ progress/",
        "    ‚îî‚îÄ‚îÄ [YYYY-MM-DD]/",
        "        ‚îî‚îÄ‚îÄ README.md"
      ]
    }
  },

  "integration": {
    "files_read": [
      ".zoe/rules/context/active-project.json",
      ".zoe/rules/context/projects/[projeto]/project-context.json",
      "package.json"
    ],
    "files_write": [
      ".zoe/rules/context/active-project.json",
      ".zoe/rules/context/projects/[projeto]/project-context.json",
      ".zoe/rules/context/projects/[projeto]/progress/[hoje]/README.md"
    ],
    "related_actions": [
      "project-creator",
      "stack-autodetection",
      "context-updater"
    ]
  },

  "validation": {
    "required_conditions": [
      "Sistema deve ter permiss√£o para criar diret√≥rios",
      "Projeto deve ter package.json v√°lido",
      "Nome do projeto deve ser v√°lido"
    ],
    "success_criteria": [
      "Estrutura completa criada",
      "Todos os arquivos obrigat√≥rios existem",
      "Contexto correto carregado",
      "Sistema pronto para opera√ß√£o"
    ],
    "blocking_behavior": "Este action bloqueia TODA execu√ß√£o at√© completar com sucesso"
  },

  "error_handling": {
    "common_errors": [
      {
        "error": "permission_denied",
        "description": "Sem permiss√£o para criar estrutura",
        "solution": "Verificar permiss√µes da pasta .zoe/ e projeto"
      },
      {
        "error": "invalid_project_name",
        "description": "Nome de projeto inv√°lido",
        "solution": "Usar apenas letras, n√∫meros e h√≠fens"
      },
      {
        "error": "missing_package_json",
        "description": "package.json n√£o encontrado",
        "solution": "Criar package.json b√°sico ou especificar stack manualmente"
      },
      {
        "error": "corrupted_context",
        "description": "Arquivo de contexto corrompido",
        "solution": "Recriar arquivo usando template padr√£o"
      }
    ]
  },

  "objective": {
    "primary": "Tornar IMPOSS√çVEL esquecer de atualizar contexto",
    "features": [
      "Verifica√ß√£o autom√°tica sempre",
      "Corre√ß√£o autom√°tica quando necess√°rio", 
      "Context memory sempre correto",
      "Zero interven√ß√£o manual necess√°ria"
    ]
  },

  "logging": {
    "log_format": "üîç CONTEXT CHECKER EXECUTADO:\n- Data atual: [CURRENT_DATE] (via comando date)\n- Projeto solicitado: [nome]\n- Projeto ativo: [nome-atual]\n- A√ß√£o: [nenhuma | atualizado | criado]\n- Status: ‚úÖ Contexto correto",
    "log_location": ".zoe/rules/context/projects/[projeto]/progress/[hoje]/README.md"
  }
} 