{
  "_metadata": {
    "action_name": "execute-direct",
    "version": "1.0",
    "format": "json",
    "description": "Execução direta de código React enviado",
    "created": "2025-01-20",
    "converted_from": "execute-direct.mdc",
    "ai_optimized": true
  },
  
  "trigger": {
    "patterns": [
      "Usuário enviou código (TSX, JSX, React)",
      "Código React/TypeScript no chat",
      "Componente para implementar"
    ],
    "automatic": true,
    "priority_level": 7,
    "category": "development"
  },

  "behavior": {
    "description": "Execução direta aplicando boas práticas sem explicações desnecessárias",
    "philosophy": "Não explique, só execute",
    "execution_steps": [
      {
        "step": 1,
        "action": "pre_analysis",
        "description": "Análise antes de ajustar código",
        "required_reads": [
          "context/stack-tech.mdc",
          "commands/detect-style.mdc"
        ],
        "decisions": [
          "Escolher Tailwind ou Styled-components baseado na detecção",
          "Verificar stack tecnológica do projeto"
        ]
      },
      {
        "step": 2,
        "action": "apply_patterns",
        "description": "Aplicar padrões React/Next/TypeScript",
        "standards": [
          "React best practices",
          "Next.js patterns",
          "TypeScript strict mode",
          "Component architecture patterns"
        ]
      },
      {
        "step": 3,
        "action": "create_tests",
        "description": "SEMPRE criar teste com vitest + userEvent",
        "mandatory": true,
        "test_framework": "vitest",
        "test_library": "@testing-library/react",
        "interaction_library": "@testing-library/user-event"
      },
      {
        "step": 4,
        "action": "implement_directly",
        "description": "Implementação direta sem explicações",
        "focus": "Execução pura",
        "avoid": "Explicações desnecessárias"
      }
    ],
    "fallback_behavior": {
      "no_code_provided": "Responder: 'Envie o código'",
      "invalid_code": "Solicitar código válido React/TypeScript"
    }
  },

  "code_standards": {
    "react_patterns": [
      "Functional components",
      "Custom hooks when appropriate",
      "Proper prop typing",
      "Event handling best practices"
    ],
    "typescript_requirements": [
      "Strict mode compliance",
      "Proper type definitions",
      "Interface definitions",
      "Generic usage when needed"
    ],
    "styling_strategy": {
      "detection_based": true,
      "options": ["Tailwind CSS", "Styled-components"],
      "fallback": "Tailwind CSS"
    }
  },

  "testing_requirements": {
    "mandatory": true,
    "framework": "vitest",
    "libraries": [
      "@testing-library/react",
      "@testing-library/user-event",
      "@testing-library/jest-dom"
    ],
    "test_patterns": [
      "userEvent.setup() obrigatório",
      "Render testing",
      "Interaction testing",
      "Accessibility testing quando apropriado"
    ]
  },

  "integration": {
    "files_read": [
      "context/stack-tech.mdc",
      "commands/detect-style.mdc",
      ".zoe/rules/context/projects/[projeto]/project-context.json"
    ],
    "files_write": [
      "Componente implementado",
      "Arquivo de teste correspondente",
      "Types se necessário"
    ],
    "related_actions": [
      "stack-autodetection",
      "mandatory-tests",
      "context-updater"
    ]
  },

  "validation": {
    "required_conditions": [
      "Código válido fornecido pelo usuário",
      "Stack tecnológica detectada",
      "Padrões de projeto identificados"
    ],
    "success_criteria": [
      "Código implementado seguindo padrões",
      "Testes criados e funcionais",
      "Integração com stack existente",
      "Zero explicações desnecessárias"
    ]
  },

  "error_handling": {
    "common_errors": [
      {
        "error": "no_code_provided",
        "description": "Usuário não forneceu código",
        "solution": "Responder: 'Envie o código'"
      },
      {
        "error": "invalid_code_format",
        "description": "Código não é React/TypeScript válido",
        "solution": "Solicitar código válido"
      },
      {
        "error": "stack_detection_failed",
        "description": "Não foi possível detectar stack",
        "solution": "Usar fallbacks padrão (Tailwind CSS)"
      },
      {
        "error": "test_creation_failed",
        "description": "Falha na criação de testes",
        "solution": "Criar teste básico mínimo"
      }
    ]
  },

  "objective": {
    "primary": "Execução direta e eficiente de código",
    "principles": [
      "Foco na implementação",
      "Sem explicações desnecessárias",
      "Aplicação automática de boas práticas",
      "Testes obrigatórios",
      "Consistência com stack do projeto"
    ]
  },

  "logging": {
    "log_format": "⚡ EXECUTE DIRECT:\n- Código: [tipo_componente]\n- Stack: [stack_detectada]\n- Estilo: [tailwind|styled]\n- Testes: [criados|falhou]\n- Status: [sucesso|erro]",
    "log_location": ".zoe/rules/logs/executions.log"
  }
} 