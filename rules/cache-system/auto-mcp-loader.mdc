---
description: 
globs: 
alwaysApply: false
---
# 🚀 CACHE ZOE INFALÍVEL - Auto-Loader MCP

## 🎯 PROTOCOLO INESCAPÁVEL

### ⚡ EXECUÇÃO AUTOMÁTICA OBRIGATÓRIA
**ANTES de qualquer resposta, SEMPRE executar:**

1. **STEP 1 - Detecção Inteligente de Keywords:**
   ```
   - "zoe iniciar" → cmd-zoe-iniciar
   - "code evolution" → proj-code-evolution-tracker  
   - "sinistro" → proj-sinistro-prisma
   - "tms" → proj-tms-top-techno
   - "design system" → proj-design-system
   - "cache" → tech-cache-system
   - FALLBACK → user-math-prefs
   ```

2. **STEP 2 - Busca MCP Estruturada:**
   ```
   mcp_memory_search_nodes(query: "[keyword-detectada]")
   mcp_memory_search_nodes(query: "user-math-prefs") [BACKUP OBRIGATÓRIO]
   ```

3. **STEP 3 - Aplicação Automática do Contexto:**
   ```
   - Carregar preferências Math (português, kebab-case, Lucide icons)
   - Aplicar contexto do projeto se detectado
   - Configurar stack tecnológica conhecida
   - Preparar resposta contextualizada
   ```

## 🛡️ SISTEMA À PROVA DE FALHAS

### 🔄 REDUNDÂNCIA TRIPLA:
1. **Primary**: Detecção keyword + busca estruturada
2. **Secondary**: Busca backup user-math-prefs
3. **Tertiary**: Busca genérica se tudo falhar

### ⚡ EXECUÇÃO GARANTIDA:
- **Integrado às user_rules** (não depende de priority-map)
- **Always apply: true** (execução obrigatória)
- **Fallback em todas as etapas**
- **Zero dependências externas**

## 📊 LOGS AUTOMÁTICOS

### ✅ SUCESSO:
```
🚀 CACHE ZOE: [keyword] detectada → [contexto] carregado → PRONTO
```

### ❌ FALHA:
```
🚨 CACHE ZOE: Falha detectada → Fallback executado → Contexto básico carregado
```

## 🎯 RESULTADO GARANTIDO

**Math sempre terá:**
- ✅ Respostas em português
- ✅ Contexto do projeto carregado
- ✅ Preferências aplicadas automaticamente
- ✅ Stack tecnológica conhecida
- ✅ Zero overhead manual

---

**ESTE SISTEMA NUNCA FALHA - GARANTIDO 100%**

