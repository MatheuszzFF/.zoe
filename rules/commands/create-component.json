{
  "_metadata": {
    "command_name": "create-component",
    "version": "2.0",
    "format": "json",
    "description": "Cria√ß√£o estruturada de componentes React com padr√µes espec√≠ficos",
    "created": "2025-06-09",
    "ai_optimized": true
  },

  "trigger": {
    "patterns": [
      "criar componente [nome]",
      "criar componente [nome] design system"
    ],
    "parameters": {
      "nome": {
        "type": "string",
        "required": true,
        "validation": "PascalCase preferred",
        "description": "Nome do componente a ser criado"
      },
      "design_system": {
        "type": "flag",
        "required": false,
        "description": "Se presente, cria tamb√©m arquivo .stories.tsx"
      }
    },
    "priority_level": 8,
    "category": "development"
  },

  "behavior": {
    "phases": [
      {
        "phase": 1,
        "name": "detect_project_stack",
        "description": "Detectar configura√ß√µes do projeto ativo",
        "steps": [
          {
            "step": 1,
            "action": "read_active_project",
            "file": ".zoe/rules/context/active-project.json"
          },
          {
            "step": 2,
            "action": "read_project_context",
            "file": ".zoe/rules/context/projects/[active_project]/project-context.json",
            "extract": ["tech_stack", "code_patterns"]
          },
          {
            "step": 3,
            "action": "detect_styling_framework",
            "logic": "check for Tailwind CSS, styled-components, CSS modules"
          }
        ]
      },
      {
        "phase": 2,
        "name": "create_component_structure",
        "description": "Criar estrutura completa de arquivos",
        "base_path": "components/[component-name]/",
        "files": [
          {
            "file": "[name].component.tsx",
            "description": "Toda a l√≥gica (useState, useEffect, handlers)",
            "template": "react_component_logic",
            "mandatory": true
          },
          {
            "file": "[name].template.tsx", 
            "description": "Toda a estrutura visual",
            "template": "react_component_template",
            "mandatory": true
          },
          {
            "file": "[name].classes.ts",
            "description": "Classes Tailwind organizadas",
            "template": "tailwind_classes",
            "condition": "tech_stack.css_framework === 'Tailwind CSS'"
          },
          {
            "file": "[name].types.ts",
            "description": "Types TypeScript (T[NomeComponente] = {...})",
            "template": "typescript_types",
            "mandatory": true
          },
          {
            "file": "[name].test.tsx",
            "description": "Testes com userEvent e testing-library",
            "template": "component_tests",
            "mandatory": true
          },
          {
            "file": "[name].composite.tsx",
            "description": "Subcomponentes reutiliz√°veis",
            "template": "composite_components",
            "condition": "complex_component === true"
          },
          {
            "file": "[name].stories.tsx",
            "description": "Stories do Storybook",
            "template": "storybook_stories",
            "condition": "design_system_flag === true"
          }
        ]
      }
    ]
  },

  "coding_standards": {
    "typing_conventions": {
      "pattern": "type T[ComponentName] = {...}",
      "rules": [
        "SEMPRE usar 'type' em vez de 'interface'",
        "Prefixo 'T' obrigat√≥rio para todos os types",
        "PascalCase para nomes de types",
        "Separar types em arquivo dedicated .types.ts"
      ],
      "examples": {
        "correct": [
          "export type TButton = { variant?: 'primary' | 'secondary' }",
          "export type TButtonState = { isLoading: boolean }"
        ],
        "incorrect": [
          "export interface ButtonProps { ... }",
          "export type ButtonProps = { ... }"
        ]
      }
    },
    "props_structure": {
      "pattern": "single object parameter with internal destructuring",
      "rules": [
        "SEMPRE receber props como objeto √∫nico",
        "Desestruturar internamente no corpo da fun√ß√£o",
        "NUNCA desestruturar diretamente nos par√¢metros"
      ],
      "template": {
        "component": "export const [Name]: React.FC<T[Name]> = (props) => {\n  const { variant, size, onClick, children } = props\n  // l√≥gica do componente\n}",
        "template": "export const [Name]Template: React.FC<T[Name]Template> = (props) => {\n  const { variant, size, className, children } = props\n  // estrutura visual\n}"
      }
    },
    "file_responsibilities": {
      ".component.tsx": ["l√≥gica", "state management", "event handlers", "effects"],
      ".template.tsx": ["estrutura visual", "JSX", "styling application"],
      ".classes.ts": ["Tailwind classes", "style organization"],
      ".types.ts": ["TypeScript definitions", "interfaces", "enums"],
      ".test.tsx": ["unit tests", "integration tests", "accessibility tests"],
      ".composite.tsx": ["subcomponents", "reusable pieces"],
      ".stories.tsx": ["Storybook documentation", "design system examples"]
    }
  },

  "testing_requirements": {
    "mandatory": true,
    "framework": "Vitest + @testing-library/react + @testing-library/user-event",
    "template_structure": {
      "imports": [
        "import { render, screen } from '@testing-library/react'",
        "import userEvent from '@testing-library/user-event'",
        "import { [ComponentName] } from './[name].component'"
      ],
      "setup": "const user = userEvent.setup()",
      "required_tests": [
        {
          "test": "should render correctly",
          "description": "Verificar renderiza√ß√£o b√°sica"
        },
        {
          "test": "should handle user interactions", 
          "description": "Testar intera√ß√µes com userEvent"
        },
        {
          "test": "should handle keyboard navigation",
          "description": "Testar acessibilidade e navega√ß√£o"
        },
        {
          "test": "should handle different states",
          "description": "Testar loading, error, disabled, etc."
        }
      ]
    },
    "patterns": {
      "user_interaction": "await user.click(element)",
      "keyboard_navigation": "await user.tab(); await user.keyboard('{Enter}')",
      "form_interaction": "await user.type(input, 'text')",
      "focus_management": "expect(element).toHaveFocus()"
    },
    "forbidden": [
      "fireEvent (usar userEvent instead)",
      "direct DOM manipulation",
      "setTimeout in tests"
    ]
  },

  "storybook_integration": {
    "condition": "design_system flag present",
    "template_structure": {
      "meta_config": {
        "title": "Design System/[ComponentName]",
        "component": "[ComponentName]",
        "parameters": { "layout": "centered" },
        "tags": ["autodocs"]
      },
      "required_stories": [
        {
          "name": "Default",
          "description": "Estado padr√£o do componente"
        },
        {
          "name": "Variants", 
          "description": "Diferentes varia√ß√µes/estados"
        }
      ],
      "advanced_stories": [
        {
          "name": "Interactive",
          "description": "Exemplo interativo com actions"
        },
        {
          "name": "Playground",
          "description": "Controles para testar props"
        }
      ]
    }
  },

  "integration": {
    "updates_files": [
      ".zoe/rules/context/projects/[active_project]/progress/[YYYY-MM-DD]/README.md"
    ],
    "reads_files": [
      ".zoe/rules/context/active-project.json",
      ".zoe/rules/context/projects/[active_project]/project-context.json"
    ],
    "creates_files": [
      "components/[component-name]/[name].component.tsx",
      "components/[component-name]/[name].template.tsx",
      "components/[component-name]/[name].types.ts",
      "components/[component-name]/[name].test.tsx"
    ],
    "conditional_files": [
      {
        "file": "components/[component-name]/[name].classes.ts",
        "condition": "Tailwind CSS detected"
      },
      {
        "file": "components/[component-name]/[name].stories.tsx",
        "condition": "design system flag present"
      }
    ]
  },

  "examples": {
    "basic_component": {
      "command": "criar componente Button",
      "creates": [
        "components/Button/Button.component.tsx",
        "components/Button/Button.template.tsx", 
        "components/Button/Button.types.ts",
        "components/Button/Button.test.tsx",
        "components/Button/Button.classes.ts"
      ]
    },
    "design_system_component": {
      "command": "criar componente Modal design system",
      "creates": [
        "components/Modal/Modal.component.tsx",
        "components/Modal/Modal.template.tsx",
        "components/Modal/Modal.types.ts", 
        "components/Modal/Modal.test.tsx",
        "components/Modal/Modal.classes.ts",
        "components/Modal/Modal.stories.tsx"
      ]
    }
  },

  "validation": {
    "component_name": {
      "pattern": "^[A-Z][a-zA-Z0-9]*$",
      "description": "PascalCase, come√ßando com letra mai√∫scula"
    },
    "file_structure": {
      "check_existing": "Verificar se componente j√° existe",
      "create_directory": "Criar pasta components/[name]/ se n√£o existir"
    }
  },

  "error_handling": {
    "component_exists": {
      "action": "prompt_override",
      "message": "‚ùå **Componente '[name]' j√° existe**\nüí° **Sobrescrever?** (s/n)\nüìÅ **Localiza√ß√£o:** components/[name]/"
    },
    "invalid_name": {
      "action": "show_validation_error",
      "message": "‚ùå **Nome inv√°lido:** '[name]'\n‚úÖ **Use:** PascalCase (ex: MyComponent)\n‚ùå **Evitar:** camelCase, kebab-case, snake_case"
    },
    "missing_dependencies": {
      "action": "suggest_installation", 
      "message": "‚ùå **Depend√™ncias ausentes**\nüì¶ **Instalar:** npm install @testing-library/react @testing-library/user-event"
    }
  }
} 