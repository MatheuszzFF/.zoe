---
description: 
globs: 
alwaysApply: false
---
# Workflow: Frontend React/Next

## ðŸŽ¯ Fluxo PadrÃ£o

### 1. **Criar Componente**
1. Ler contexto atual (`context/stack-tech.mdc`)
2. Detectar Tailwind (`commands/detect-style.mdc`)
3. Criar pasta kebab-case: `components/[nome-do-componente]/`
4. Gerar arquivos:
   - `[nome].types.ts` â†’ Interfaces
   - `[nome].component.tsx` â†’ LÃ³gica
   - `[nome].template.tsx` â†’ Visual
   - `[nome].classes.ts` â†’ Classes (se Tailwind)
   - `[nome].composite.tsx` â†’ Subcomponentes (se necessÃ¡rio)
5. Aplicar padrÃµes TypeScript + React
6. Documentar em progress/

### 2. **Criar PÃ¡gina**
1. Aplicar template (`templates/next-page.mdc`)
2. Criar estrutura similar aos componentes
3. Configurar SEO meta tags no `.page.tsx`
4. Separar lÃ³gica (pÃ¡gina) de visual (template)
5. Adicionar getServerSideProps se necessÃ¡rio
6. Testar responsividade
7. Documentar alteraÃ§Ãµes

### 3. **Fix de Bug**
1. Executar checklist (`commands/fix-bugs.mdc`)
2. Aplicar correÃ§Ãµes padrÃ£o
3. Verificar todos os arquivos da estrutura
4. Manter separaÃ§Ã£o lÃ³gica/visual
5. Validar TypeScript
6. Documentar correÃ§Ã£o

### 4. **OtimizaÃ§Ã£o**
1. Aplicar React.memo no `.component.tsx`
2. Lazy loading de componentes
3. Otimizar `.classes.ts` (Tailwind)
4. Verificar re-renders
5. Performance profiling
6. Lighthouse audit

## âš¡ Comandos RÃ¡pidos
- `criar componente [nome-componente]` â†’ Estrutura completa
- `criar pÃ¡gina [nome-pagina]` â†’ Page + template + SEO
- `fix bugs` â†’ CorreÃ§Ãµes automÃ¡ticas
- `otimizar performance` â†’ Melhorias padrÃ£o

## ðŸ“‹ Estrutura PadrÃ£o Criada
```
[nome-do-item]/
â”œâ”€â”€ [nome].component.tsx    # LÃ³gica
â”œâ”€â”€ [nome].template.tsx     # Visual
â”œâ”€â”€ [nome].classes.ts       # Classes Tailwind (se aplicÃ¡vel)
â”œâ”€â”€ [nome].types.ts         # Interfaces TypeScript
â””â”€â”€ [nome].composite.tsx    # Subcomponentes (opcional)
```

## âœ… Checklist Geral
- [ ] Pasta kebab-case
- [ ] SeparaÃ§Ã£o lÃ³gica (.component) vs visual (.template)
- [ ] TypeScript interfaces (.types)
- [ ] Classes organizadas (.classes) se Tailwind
- [ ] Componentes funcionais
- [ ] Props destructuring
- [ ] Responsive design
- [ ] Accessibility
- [ ] Performance otimizada



